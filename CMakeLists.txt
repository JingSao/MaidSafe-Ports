cmake_minimum_required(VERSION 2.8.12.2 FATAL_ERROR)

project(maidsafe_port)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules)
include(port_utils)

if(CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES} ReleaseNoInline CACHE INTERNAL "" FORCE)
else()
  if(NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type given.  Setting and caching CMAKE_BUILD_TYPE to Debug.")
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Type of build; options are: Debug, Release, RelWithDebInfo, or MinSizeRel." FORCE)
  else()
    message(STATUS "Build type set to ${CMAKE_BUILD_TYPE}")
  endif()
endif()

set(SubModules common)
if(ANDROID_BUILD)
  if(WIN32 OR APPLE)
    message(FATAL_ERROR "Android builds are currently only supported in Linux.")
  endif()
  set(SubModules ${SubModules} android)
else()
  # TODO(Viv) Implement Submodule format for this section too
  # set(SubModules ${SubModules} csharp nodejs python)
endif()

foreach(SubModule ${SubModules})
  ms_underscores_to_camel_case(${SubModule} SubModuleName)
  set(Msg "Configuring ${SubModuleName} Module for build")
  string(REGEX REPLACE . "-" DashSeperator ${Msg})
  string(REGEX REPLACE . "=" EqualsSeperator ${Msg})
  message("${EqualsSeperator}\n${Msg}\n${DashSeperator}")
  add_subdirectory(src/${SubModule})
  set(${SubModule}_SOURCE_DIR ${CMAKE_SOURCE_DIR}/src/${SubModule})
endforeach()
message("${EqualsSeperator}")

